"strict";function ready(e){"loading"!==document.readyState?e():document.addEventListener("DOMContentLoaded",e)}function productionServer(){return window.location.href.indexOf("fourtonfish.com")>-1}function removeClasses(e){e.className=""}function getEventTarget(e){return e=e||window.event,e.target||e.srcElement}function getRandomInt(e,t){return Math.floor(Math.random()*(t-e+1))+e}window.smoothScroll=function(){if(void 0!==document.querySelectorAll&&void 0!==window.pageYOffset&&void 0!==history.pushState){var e=function(e){return"HTML"===e.nodeName?-window.pageYOffset:e.getBoundingClientRect().top+window.pageYOffset},t=function(e){return.5>e?4*e*e*e:(e-1)*(2*e-2)*(2*e-2)+1},n=function(e,n,o,s){return o>s?n:e+(n-e)*t(o/s)},o=function(t,o,s){o=o||500;var a,r=window.pageYOffset;a="number"==typeof t?parseInt(t):e(t);var i=Date.now(),l=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||function(e){window.setTimeout(e,15)},d=function(){var e=Date.now()-i;window.scroll(0,n(r,a,e,o)),e>o?"function"==typeof s&&s(t):l(d)};d()},s=function(e){e.preventDefault(),o(document.getElementById(this.hash.substring(1)),500,function(){})};return document.addEventListener("DOMContentLoaded",function(){for(var e,t=document.querySelectorAll('a[href^="#"]'),n=t.length;e=t[--n];)e.addEventListener("click",s,!1)}),o}}();var xmlToJSON=function(e){var t=new X2JS,n=t.xml_str2json(e);return n=n.response},userRole,partnerRole="unknown",gameStarted=!1,gameFinished=!1;window.onbeforeunload=function(){return gameFinished===!1?"Are you sure?":void 0},ready(function(){function e(e,t){return e=e.toLowerCase().trim().replace(/ /g,""),t===!0&&(e=e.replace(/[.,?!\s,]/g,"")),e}function t(e){for(var t=0,n=x.length;n>t;t++)if(new RegExp(x[t],"gi").test(e.replace(/\W/g,""))===!0)return c("system","ERROR"),c("system","Unable to send message"),!0;return!1}function n(){B.service=u.getAttribute("data-service"),console.log(B.service);var e="Play Detective, a game by @fourtonfish";null!==B.service&&"reddit"===B.service&&(e="[log] TITLE"),B.shareUrl=u.getAttribute("data-url").replace(/DESCRIPTION/,'Detective: A "reverse Turing test" chat game.').replace(/CHATLOGURL/gi,"http://fourtonfish.com/detective/log?id="+B.chatLogId).replace(/SHORTTITLE/,e),B.status.innerHTML="",window.open(B.shareUrl)}function o(){clearTimeout(g),g=setTimeout(function(){i()},getRandomInt(3e4,6e4))}function s(e){if(D.useLessClever===!0&&"..."!==e){e=e.toLowerCase().replace(/^(i )| i /gi," I ").trim();var t=e.replace(/([.?!])\s*(?=[A-Z])/,"$1|").split("|");1===t.length&&(e=e.replace(/\.$/,"")),5===getRandomInt(1,10)&&(e=e.replace(/(')/gi,""))}switch(getRandomInt(1,1e4)){case"1":e=e.replace("ll","l");break;case"2":e=e.replace("ss","s");break;case"3":e=e.replace("l","k");break;case"4":e=e.replace("o","p");break;case"4":e=e.replace("w","s");break;case"5":e=e.replace("s","d")}return e}function a(){C.style.display="block",Array.prototype.forEach.call(document.getElementsByClassName("share-link-shifted"),function(e,t){setTimeout(function(){e.classList.remove("share-link-shifted"),e.classList.add("share-link-unshifted")},10*t*t)})}function r(t){if(-1===D.alreadyAnswered.indexOf(e(t,!0))){"..."!==t&&D.alreadyAnswered.push(e(t,!0));var n=new XMLHttpRequest;n.open("GET","//www.botlibre.com/rest/botlibre/form-chat?instance="+D.id+"&application=155525030417300595&message="+t+(null!==D.conversationID?"&conversation="+D.conversationID:""),!0),n.onload=function(){if(n.status>=200&&n.status<400){var e=xmlToJSON(n.responseText);null===D.conversationID&&(D.conversationID=e._conversation),void 0===e.message?i():l(s(e.message))}},n.onerror=function(){},n.send()}else if(t.indexOf("?")>-1)if(D.alreadyAnsweredResponses.length>0){var o=D.alreadyAnsweredResponses.splice(getRandomInt(0,D.alreadyAnsweredResponses.length-1),1);o=o[0],l(s(o))}else l("...")}function i(){var e=["..."];r(e[getRandomInt(0,e.length-1)])}function l(e){if(e=e.replace(/(RobotNotImpostor(\d)*|Jenny|linh truong|Alice)/gi,D.name),e=e.replace(/ROBOTFROM/gi,D.from),D.pendingResponses.push(e),D.pendingResponses.length>0){var t=D.pendingResponses.shift(),n=t.length,o=n*getRandomInt(50,100)+getRandomInt(2e3,8e3);D.responsePending===!1?(D.responsePending=!0,setTimeout(function(){c("robot",e),D.responsePending=!1},o)):setTimeout(function(){return function(e){l(e)}(e)},1e3)}}function d(e){"unknown"!==partnerRole?(gameFinished=!0,e===partnerRole?(c("system","CORRECT"),m.emit("game over","detective won")):(c("system","INCORRECT"),m.emit("game over","detective lost")),c("system","Game is over"),a()):(c("system","ERROR"),c("system","Too early to tell"))}function c(t,n){if(0===n.trim().length)return!1;var o=document.createElement("LI");switch(t){case"user":o.classList.add("user-message"),o.classList.add("new-message");break;case"system":switch(o.classList.add("system-message"),n){case"ERROR":case"INCORRECT":o.classList.add("error-message");break;case"CORRECT":o.classList.add("user-correct");break;default:o.classList.add("new-message")}break;case"robot":case"impostor":o.classList.add("rori-message"),o.classList.add("new-message")}var s=e(n,!0);if(s.indexOf("wiggle")>-1&&o.classList.add("wiggle-message"),s.indexOf("jump")>-1&&o.classList.add("jump-message"),o.innerHTML=n.replace(/(<([^>]+)>)/gi,""),"user"!==t&&"system"!==t&&(o.innerHTML='<span class="message-prepend">></span> '+o.innerHTML),"robot"===t&&gameFinished===!0);else switch(k.appendChild(o),e(n,!0)){case"ilikethisgame":c("system","Oh hey, thanks!");break;case"godmode":c("system","Not in this game.")}"user"===t?T.value="":document.hasFocus()||(document.title="New message | Detective by @fourtonfish"),document.body.scrollTop=document.body.scrollHeight,n=e(n,!1),"user"===t&&/you.*re?.*(impostor|imposter|robot|bot)/gi.test(n)&&"detective"===userRole&&gameFinished===!1&&-1===n.indexOf("not")&&(-1===n.indexOf("?")&&n.indexOf("bot")>-1&&-1===n.indexOf("impostor")&&-1===n.indexOf("?")?d("robot"):-1===n.indexOf("?")&&(n.indexOf("impostor")>-1||n.indexOf("imposter")>-1)&&-1===n.indexOf("bot")?d("impostor"):c("system",'Please say "You are a robot" or "You are an impostor".'))}var u,m,g,h=document.getElementsByClassName("shifted-1"),f=document.getElementsByClassName("shifted"),p=document.getElementById("loading"),y=document.getElementById("you-are"),v=document.getElementById("instructions-wrapper"),w=document.getElementById("instructions"),R=document.getElementById("dismiss-instructions"),L=document.getElementById("more-info"),E=document.getElementById("role-reminder"),b=document.getElementById("message-form"),I=document.getElementById("send-message"),T=document.getElementById("message-text"),O=document.getElementById("messages-wrapper"),k=document.getElementById("messages"),C=document.getElementById("share-chat-log-wrapper"),B=(document.getElementById("what-is-this"),{triggerEl:document.getElementById("share-buttons-game"),service:null,status:document.getElementById("chat-log-url-status"),shareUrl:null,chatLogId:null}),A=["909409"],M=["your mom","not your business","none of your business","Steve","Bob","Lucy","Rita","Cletus","Rufus","Gale","Sidney","Emmie","Ethyl","Babara","Jodie","Karon","Rashida","Olen","Felisa","Nenita","Camille","Shay","Phoebe","Angelique","Monte","Exie","Lucrecia","Melodi","Marge","Zoe","Cassandra","Rosaura","Brendon","Mckinley","Lucie","Shandi","Mao","Vilma","Shara","Giselle","Royal","Dia","Ivy","Sheridan","Kandi","Juliette","Camilla","Susanna","Gary","Gertha","Britany","Marvella","Sina","Lakeesha","Sherill","Toney","Sherri","Albertina","Taren","Hildred","Erma","Lenard","Tyson","Markus","Inez","Letty","Deedra","Tammera","Stanley","Lora","Leon","Belkis","Janae","Lenna","Bronwyn","Kimbery","Debi","Bernie","Alleen","Deloise","Chiquita","Shanelle","Wynona","Kisha","Minna","Laronda","Chaya","Anabel","Leila","Arletha","Loyce","Crysta","Maegan","Valery","Hee","Ed","Mitsuko","Vincenzo","Mercedez","Janeen","Fredrick","Sharda","Dylan","Cassi","Mae","Bobbye","Lanny"],S=["Uh, where are you from?","That's prvivate.","Your mom!","I live right next to you!","...","I'm homeless","I'm homeless?"],D={id:A[getRandomInt(0,A.length-1)],name:M[getRandomInt(0,M.length-1)],from:S[getRandomInt(0,S.length-1)],conversationID:null,useLessClever:Math.random()<.5?!0:!1,responsePending:!1,pendingResponses:[],alreadyAnswered:[],alreadyAnsweredResponses:["You already asked that question.","You already asked me that.","I think I already told you.","I already told you.","I already answered that.","Did you read my answer?","You already said that.","...","I told you","I literally just told you.","I just told you."]},x=["n(i|1)+g{2,}((e|3)+r+|a)+","f+a+g+","f+(a|@)+g{2,}(o|0)+t+"],H=setTimeout(function(){gameStarted===!1&&(p.innerHTML="Still waiting...",H=setTimeout(function(){gameStarted===!1&&(p.innerHTML="Looks like nobody's around...",setTimeout(function(){gameFinished=!0,location.reload()},getRandomInt(300,3e3)))},4e4))},15e3);window.addEventListener("focus",function(){void 0!==userRole&&(document.title="You are the "+userRole+" | Detective by @fourtonfish")},!1);var Y;Y=productionServer()?io(document.location.protocol+"//fourtonfish.com:3003"):io(document.location.protocol+"//"+document.location.host),R&&R.addEventListener("click",function(){"robot"===partnerRole&&o(),v.classList.add("shiftedUp"),b.classList.remove("hidden"),L.classList.remove("hidden"),L.classList.remove("shifted"),T.focus()}),B.triggerEl&&B.triggerEl.addEventListener("click",function(e){switch(e.preventDefault(),u=getEventTarget(e),u.getAttribute("data-url")){case"RELOAD":location.reload();break;default:null===B.shareUrl?(B.status.innerHTML="Loading...",m.emit("save_chat_log",O.innerHTML,userRole)):n()}}),h.length>0&&Array.prototype.forEach.call(h,function(e,t){setTimeout(function(){e.classList.remove("shifted-1"),e.classList.add("unshifted-1")},(200-10*t)*t)}),Y.on("connected",function(){m=Y}),Y.on("chat_log_saved",function(e){console.log("chat log saved"),B.chatLogId=e,n()}),Y.on("error",function(e){console.log("ERROR"),console.log(e)}),Y.on("game over",function(e){"detective won"===e?c("system","YOU HAVE BEEN REVEALED"):c("system","YOU FOOLED THE DETECTIVE"),c("system","Game is over"),a()}),Y.on("partner disconnected",function(e){c("system","Partner disconnected."),a(),console.log("Partner disconnected: "+e+"."),"unknown"!==partnerRole&&"detective"===userRole&&gameFinished===!1&&c("system","You were speaking with the "+partnerRole.toUpperCase()+".")}),Y.on("you are",function(e){gameStarted=!0,clearTimeout(H),userRole=e,p.classList.add("shiftedUp");var t=document.getElementsByClassName("unshifted-1");t.length>0&&Array.prototype.forEach.call(t,function(e,t){setTimeout(function(){e.classList.remove("unshifted-1"),e.classList.add("shiftedUp1")},(200-10*t)*t)}),f.length>0&&Array.prototype.forEach.call(f,function(e,t){setTimeout(function(){e.classList.remove("shifted"),e.classList.add("unshifted")},(200-10*t)*t)}),R.focus(),document.title="You are the "+userRole+" | Detective by @fourtonfish",E.innerHTML='the <span class="highlight">'+userRole+"</span>",y.innerHTML='You are the <span class="highlight">'+userRole+"</span>",w.innerHTML="detective"===userRole?'<p>You must figure out whether you are speaking to a <span class="highlight">ROBOT</span>* or an <span class="highlight">IMPOSTOR</span>, another player pretending to be a <span class="highlight">ROBOT</span>*.</p><p>Say <em>"You are an impostor"</em> or <em>"You are a robot"</em> once you are confident with your choice.</p><p class="definition">*A <a href="http://en.wikipedia.org/wiki/Chatbot" target="_blank">chatter robot</a> is a type of conversational agent, a computer program designed to simulate an intelligent conversation with one or more human users via auditory or textual methods.</p>':'<p>You must convince the <span class="highlight">DETECTIVE</span> that he or she is speaking to a <span class="highlight">ROBOT</span>*.</p><p class="definition">*A <a href="http://en.wikipedia.org/wiki/Chatbot" target="_blank">chatter robot</a> is a type of conversational agent, a computer program designed to simulate an intelligent conversation with one or more human users via auditory or textual methods.</p>'}),Y.on("paired",function(n){"robot"===n.users[0]||"robot"===n.users[1]?(partnerRole="robot",I.addEventListener("click",function(n){n.preventDefault(),t(e(T.value,!0))===!1&&(o(),gameFinished===!1?(r(T.value),c("user",T.value)):alert("Let's give the robot some rest."))})):(partnerRole="detective"===userRole?"impostor":"detective",I.addEventListener("click",function(n){n.preventDefault(),t(e(T.value,!0))===!1&&(Y.emit("send message",{from:userRole,message:T.value}),c("user",T.value))}))}),Y.on("message received",function(e){"unknown"===partnerRole&&(partnerRole=e.from),e.from!==userRole&&c(partnerRole,e.message)}),Y.on("security info",function(e){"?security_info=true"===window.location.search&&console.log(e)})});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMubWluLmpzIl0sIm5hbWVzIjpbInJlYWR5IiwiZm4iLCJkb2N1bWVudCIsInJlYWR5U3RhdGUiLCJhZGRFdmVudExpc3RlbmVyIiwicHJvZHVjdGlvblNlcnZlciIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsImluZGV4T2YiLCJyZW1vdmVDbGFzc2VzIiwiZWwiLCJjbGFzc05hbWUiLCJnZXRFdmVudFRhcmdldCIsImUiLCJldmVudCIsInRhcmdldCIsInNyY0VsZW1lbnQiLCJnZXRSYW5kb21JbnQiLCJtaW4iLCJtYXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJzbW9vdGhTY3JvbGwiLCJxdWVyeVNlbGVjdG9yQWxsIiwicGFnZVlPZmZzZXQiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiZ2V0VG9wIiwiZWxlbWVudCIsIm5vZGVOYW1lIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwiZWFzZUluT3V0Q3ViaWMiLCJ0IiwicG9zaXRpb24iLCJzdGFydCIsImVuZCIsImVsYXBzZWQiLCJkdXJhdGlvbiIsImNhbGxiYWNrIiwicGFyc2VJbnQiLCJjbG9jayIsIkRhdGUiLCJub3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0Iiwic3RlcCIsInNjcm9sbCIsImxpbmtIYW5kbGVyIiwiZXYiLCJwcmV2ZW50RGVmYXVsdCIsImdldEVsZW1lbnRCeUlkIiwidGhpcyIsImhhc2giLCJzdWJzdHJpbmciLCJhIiwiaW50ZXJuYWwiLCJpIiwibGVuZ3RoIiwieG1sVG9KU09OIiwieG1sVmFsdWUiLCJ4MmpzIiwiWDJKUyIsImpzb25WYWx1ZSIsInhtbF9zdHIyanNvbiIsInJlc3BvbnNlIiwidXNlclJvbGUiLCJwYXJ0bmVyUm9sZSIsImdhbWVTdGFydGVkIiwiZ2FtZUZpbmlzaGVkIiwib25iZWZvcmV1bmxvYWQiLCJjbGVhclRleHQiLCJ0ZXh0IiwicmVtb3ZlUHVuY3R1YXRpb24iLCJ0b0xvd2VyQ2FzZSIsInRyaW0iLCJyZXBsYWNlIiwiY29udGFpbnNPZmZlbnNpdmVMYW5ndWFnZSIsImoiLCJvZmZlbnNpdmVXb3JkcyIsIlJlZ0V4cCIsInRlc3QiLCJhZGRNZXNzYWdlIiwic2hhcmVDaGF0TG9nIiwic2hhcmVDaGF0TG9nTW9kdWxlIiwic2VydmljZSIsInNoYXJlVGFyZ2V0IiwiZ2V0QXR0cmlidXRlIiwiY29uc29sZSIsImxvZyIsInNoYXJlVGl0bGUiLCJzaGFyZVVybCIsImNoYXRMb2dJZCIsInN0YXR1cyIsImlubmVySFRNTCIsIm9wZW4iLCJyZXN0YXJ0R2xvYmFsVGltZXIiLCJjbGVhclRpbWVvdXQiLCJnbG9iYWxUaW1lciIsInBva2VUaGVSb2JvdCIsImxlc3NDbGV2ZXIiLCJyb2JvdCIsInVzZUxlc3NDbGV2ZXIiLCJ0ZW1wIiwic3BsaXQiLCJzaG93U2hhcmluZ0J1dHRvbnMiLCJzaGFyZUNoYXRMb2dXcmFwcGVyIiwic3R5bGUiLCJkaXNwbGF5IiwiQXJyYXkiLCJwcm90b3R5cGUiLCJmb3JFYWNoIiwiY2FsbCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJpbmRleCIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsImNvbnRhY3RUaGVSb2JvdCIsIm1lc3NhZ2UiLCJhbHJlYWR5QW5zd2VyZWQiLCJwdXNoIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiaWQiLCJjb252ZXJzYXRpb25JRCIsIm9ubG9hZCIsInJlc3AiLCJyZXNwb25zZVRleHQiLCJfY29udmVyc2F0aW9uIiwidW5kZWZpbmVkIiwicm9ib3RSZXNwb25kIiwib25lcnJvciIsInNlbmQiLCJhbHJlYWR5QW5zd2VyZWRSZXNwb25zZXMiLCJhbm5veWVkTWVzc2FnZSIsInNwbGljZSIsInNlbmRUZXh0IiwibmFtZSIsImZyb20iLCJwZW5kaW5nUmVzcG9uc2VzIiwibmV4dE1lc3NhZ2UiLCJzaGlmdCIsIm5leHRNZXNzYWdlTGVuZ3RoIiwibmV4dE1lc3NhZ2VEZWxheSIsInJlc3BvbnNlUGVuZGluZyIsInJldmVhbEltcG9zdG9yIiwiZGV0ZWN0aXZlR3Vlc3MiLCJnbG9iYWxTb2NrZXQiLCJlbWl0IiwibWVzc2FnZUZyb20iLCJtZXNzYWdlVGV4dCIsIm5ld01lc3NhZ2UiLCJjcmVhdGVFbGVtZW50IiwiZnVuU3R1ZmYiLCJtZXNzYWdlcyIsImFwcGVuZENoaWxkIiwibWVzc2FnZVRleHRJbnB1dCIsInZhbHVlIiwiaGFzRm9jdXMiLCJ0aXRsZSIsImJvZHkiLCJzY3JvbGxUb3AiLCJzY3JvbGxIZWlnaHQiLCJzaGlmdGVkRWxzMSIsInNoaWZ0ZWRFbHMiLCJsb2FkaW5nSW5kaWNhdG9yIiwieW91QXJlIiwiaW5zdHJ1Y3Rpb25zV3JhcHBlciIsImluc3RydWN0aW9ucyIsImRpc21pc3NJbnN0cnVjdGlvbnNCdXR0b24iLCJtb3JlSW5mbyIsInJvbGVSZW1pbmRlciIsIm1lc3NhZ2VGb3JtIiwic2VuZE1lc3NhZ2VCdXR0b24iLCJtZXNzYWdlc1dyYXBwZXIiLCJ0cmlnZ2VyRWwiLCJyb2JvdElEcyIsIm5hbWVzIiwicGxhY2VzUHJpdmF0ZSIsImdsb2JhbFRpbWVyV2FpdGluZyIsInJlbG9hZCIsInNvY2tldCIsImlvIiwicHJvdG9jb2wiLCJob3N0IiwiZm9jdXMiLCJvbiIsImRhdGEiLCJ0b1VwcGVyQ2FzZSIsInVuc2hpZnRlZEVsczEiLCJ1c2VycyIsImFsZXJ0Iiwic2VhcmNoIl0sIm1hcHBpbmdzIjoiQUFBQSxRQWtFQSxTQUFTQSxPQUFNQyxHQUNlLFlBQXhCQyxTQUFTQyxXQUNYRixJQUVBQyxTQUFTRSxpQkFBaUIsbUJBQW9CSCxHQUlsRCxRQUFTSSxvQkFDUCxNQUFRQyxRQUFPQyxTQUFTQyxLQUFLQyxRQUFRLG1CQUFxQixHQUc1RCxRQUFTQyxlQUFjQyxHQUNyQkEsRUFBR0MsVUFBWSxHQUlqQixRQUFTQyxnQkFBZUMsR0FFdEIsTUFEQUEsR0FBSUEsR0FBS1IsT0FBT1MsTUFDVEQsRUFBRUUsUUFB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QUFNLElBQzFDNUgsWUFBYyxRQUNkMkcsRUFBa0I5SyxpQkFBaUIsUUFBUyxTQUFTVyxHQUNuREEsRUFBTXVDLGlCQUNGMkIsRUFBMEJOLEVBQVVzRixFQUFpQkMsT0FBTyxPQUFXLElBQ3pFOUQsSUFDSTNCLGdCQUFpQixHQUNuQmlELEVBQWdCdUMsRUFBaUJDLE9BQ2pDNUUsRUFBVyxPQUFRMkUsRUFBaUJDLFFBR3BDa0MsTUFBTSx3Q0FNWjdILFlBQTRCLGNBQWJELFNBQTJCLFdBQWEsWUFFdkQ0RyxFQUFrQjlLLGlCQUFpQixRQUFTLFNBQVNXLEdBQ25EQSxFQUFNdUMsaUJBQ0YyQixFQUEwQk4sRUFBVXNGLEVBQWlCQyxPQUFPLE9BQVcsSUFDekV3QixFQUFPakMsS0FBSyxnQkFDUlYsS0FBTXpFLFNBQ05xRCxRQUFTc0MsRUFBaUJDLFFBRzlCNUUsRUFBVyxPQUFRMkUsRUFBaUJDLGFBTzVDd0IsRUFBT0ssR0FBRyxtQkFBb0IsU0FBU0MsR0FDakIsWUFBaEJ6SCxjQUNGQSxZQUFjeUgsRUFBS2pELE1BRWpCaUQsRUFBS2pELE9BQVN6RSxVQUNoQmdCLEVBQVdmLFlBQWF5SCxFQUFLckUsV0FJakMrRCxFQUFPSyxHQUFHLGdCQUFpQixTQUFTQyxHQUNILHdCQUEzQjFMLE9BQU9DLFNBQVM4TCxRQUNsQnpHLFFBQVFDLElBQUltRyIsImZpbGUiOiJzY3JpcHRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwic3RyaWN0XCI7XG4vKlxuICBodHRwczovL2dpdGh1Yi5jb20vYWxpY2VsaWV1dGllci9zbW9vdGhTY3JvbGxcbiovXG53aW5kb3cuc21vb3RoU2Nyb2xsID0gKGZ1bmN0aW9uKCl7XG5pZihkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsID09PSB2b2lkIDAgfHwgd2luZG93LnBhZ2VZT2Zmc2V0ID09PSB2b2lkIDAgfHwgaGlzdG9yeS5wdXNoU3RhdGUgPT09IHZvaWQgMCkgeyByZXR1cm47IH1cbnZhciBnZXRUb3AgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgaWYoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKXtcbiAgICAgIHJldHVybiAtd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgIH0gXG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0O1xufTtcbnZhciBlYXNlSW5PdXRDdWJpYyA9IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0PDAuNSA/IDQqdCp0KnQgOiAodC0xKSooMip0LTIpKigyKnQtMikrMTsgfTtcbnZhciBwb3NpdGlvbiA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIGVsYXBzZWQsIGR1cmF0aW9uKSB7XG4gICAgaWYgKGVsYXBzZWQgPiBkdXJhdGlvbil7XG4gICAgICByZXR1cm4gZW5kO1xuICAgIH0gXG4gICAgcmV0dXJuIHN0YXJ0ICsgKGVuZCAtIHN0YXJ0KSAqIGVhc2VJbk91dEN1YmljKGVsYXBzZWQgLyBkdXJhdGlvbik7XG59O1xudmFyIHNtb290aFNjcm9sbCA9IGZ1bmN0aW9uKGVsLCBkdXJhdGlvbiwgY2FsbGJhY2spe1xuICAgIGR1cmF0aW9uID0gZHVyYXRpb24gfHwgNTAwO1xuICAgIHZhciBzdGFydCA9IHdpbmRvdy5wYWdlWU9mZnNldCxcbiAgICAgICAgZW5kO1xuICAgIGlmICh0eXBlb2YgZWwgPT09ICdudW1iZXInKSB7XG4gICAgICBlbmQgPSBwYXJzZUludChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuZCA9IGdldFRvcChlbCk7XG4gICAgfVxuICAgIHZhciBjbG9jayA9IERhdGUubm93KCk7XG4gICAgdmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgIGZ1bmN0aW9uKGZuKXt3aW5kb3cuc2V0VGltZW91dChmbiwgMTUpO307XG4gICAgdmFyIHN0ZXAgPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgZWxhcHNlZCA9IERhdGUubm93KCkgLSBjbG9jaztcbiAgICAgICAgd2luZG93LnNjcm9sbCgwLCBwb3NpdGlvbihzdGFydCwgZW5kLCBlbGFwc2VkLCBkdXJhdGlvbikpO1xuICAgICAgICBpZiAoZWxhcHNlZCA+IGR1cmF0aW9uKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBzdGVwKCk7XG59O1xudmFyIGxpbmtIYW5kbGVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHNtb290aFNjcm9sbChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmhhc2guc3Vic3RyaW5nKDEpKSwgNTAwLCBmdW5jdGlvbihlbCkge1xuICAgIH0pO1xufTtcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW50ZXJuYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhW2hyZWZePVwiI1wiXScpLCBhO1xuICAgIGZvcih2YXIgaT1pbnRlcm5hbC5sZW5ndGg7IGE9aW50ZXJuYWxbLS1pXTspe1xuICAgICAgICBhLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBsaW5rSGFuZGxlciwgZmFsc2UpO1xuICAgIH1cbn0pO1xucmV0dXJuIHNtb290aFNjcm9sbDtcbn0pKCk7XG5cbnZhciB4bWxUb0pTT04gPSBmdW5jdGlvbih4bWxWYWx1ZSkge1xuICB2YXIgeDJqcyA9IG5ldyBYMkpTKCksXG4gICAgICBqc29uVmFsdWUgPSB4MmpzLnhtbF9zdHIyanNvbih4bWxWYWx1ZSk7XG4gIGpzb25WYWx1ZSA9IGpzb25WYWx1ZS5yZXNwb25zZTtcbiAgcmV0dXJuIGpzb25WYWx1ZTtcbn07XG5cbmZ1bmN0aW9uIHJlYWR5KGZuKSB7XG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnbG9hZGluZycpe1xuICAgIGZuKCk7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9kdWN0aW9uU2VydmVyKCl7XG4gIHJldHVybiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignZm91cnRvbmZpc2guY29tJykgPiAtMSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoZWwpe1xuICBlbC5jbGFzc05hbWUgPSAnJztcbn1cblxuLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzUxMTY5MjkvZ2V0LWNsaWNrZWQtbGktZnJvbS11bC1vbmNsaWNrXG5mdW5jdGlvbiBnZXRFdmVudFRhcmdldChlKSB7XG4gIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgcmV0dXJuIGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDsgXG59XG5cbi8vaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNTI3ODAzL2dlbmVyYXRpbmctcmFuZG9tLW51bWJlcnMtaW4tamF2YXNjcmlwdC1pbi1hLXNwZWNpZmljLXJhbmdlXG5mdW5jdGlvbiBnZXRSYW5kb21JbnQobWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG59XG5cbnZhciB1c2VyUm9sZSwgLy8gcm9ib3Qgb3IgaW1wb3N0b3JcbiAgICBwYXJ0bmVyUm9sZSA9ICd1bmtub3duJyxcbiAgICBnYW1lU3RhcnRlZCA9IGZhbHNlLFxuICAgIGdhbWVGaW5pc2hlZCA9IGZhbHNlO1xuXG5cbndpbmRvdy5vbmJlZm9yZXVubG9hZCA9IGZ1bmN0aW9uKGUpIHtcbiAgaWYgKGdhbWVGaW5pc2hlZCA9PT0gZmFsc2Upe1xuICAgIHJldHVybiAnQXJlIHlvdSBzdXJlPyc7XG4gIH1cbn07XG5cblxucmVhZHkoZnVuY3Rpb24oKXtcbiAgdmFyIHNoaWZ0ZWRFbHMxID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2hpZnRlZC0xJyksXG4gICAgICBzaGlmdGVkRWxzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2hpZnRlZCcpLFxuICAgICAgbG9hZGluZ0luZGljYXRvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkaW5nJyksXG4gICAgICB5b3VBcmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgneW91LWFyZScpLFxuICAgICAgaW5zdHJ1Y3Rpb25zV3JhcHBlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnN0cnVjdGlvbnMtd3JhcHBlcicpLFxuICAgICAgaW5zdHJ1Y3Rpb25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luc3RydWN0aW9ucycpLFxuICAgICAgZGlzbWlzc0luc3RydWN0aW9uc0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaXNtaXNzLWluc3RydWN0aW9ucycpLFxuICAgICAgbW9yZUluZm8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9yZS1pbmZvJyksXG4gICAgICByb2xlUmVtaW5kZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9sZS1yZW1pbmRlcicpLFxuICAgICAgbWVzc2FnZUZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZS1mb3JtJyksXG4gICAgICBzZW5kTWVzc2FnZUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZW5kLW1lc3NhZ2UnKSxcbiAgICAgIG1lc3NhZ2VUZXh0SW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZS10ZXh0JyksXG4gICAgICBtZXNzYWdlc1dyYXBwZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZXMtd3JhcHBlcicpLFxuICAgICAgbWVzc2FnZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZXMnKSxcbiAgICAgIHNoYXJlQ2hhdExvZ1dyYXBwZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hhcmUtY2hhdC1sb2ctd3JhcHBlcicpLFxuICAgICAgd2hhdElzVGhpc0xpbmsgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2hhdC1pcy10aGlzJyksXG4vLyAgICAgIHJlcXVlc3ROb3RpZmljYXRpb25QZXJtaXNzaW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlcXVlc3Qtbm90aWZpY2F0aW9uLXBlcm1pc3Npb24nKSxcbiAgICAgIHNoYXJlQ2hhdExvZ01vZHVsZSA9IHtcbiAgICAgICAgdHJpZ2dlckVsOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hhcmUtYnV0dG9ucy1nYW1lJyksXG4gICAgICAgIHNlcnZpY2U6IG51bGwsXG4gICAgICAgIHN0YXR1czogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXQtbG9nLXVybC1zdGF0dXMnKSxcbiAgICAgICAgc2hhcmVVcmw6IG51bGwsXG4gICAgICAgIGNoYXRMb2dJZDogbnVsbFxuICAgICAgfSxcbiAgICAgIHJvYm90SURzID0gW1xuICAgICAgICAvLyAnMzcnLFxuICAgICAgICAnOTA5NDA5J1xuICAgICAgXSxcbiAgICAgIG5hbWVzID0gW1xuICAgICAgICAneW91ciBtb20nLFxuICAgICAgICAnbm90IHlvdXIgYnVzaW5lc3MnLFxuICAgICAgICAnbm9uZSBvZiB5b3VyIGJ1c2luZXNzJyxcbiAgICAgICAgJ1N0ZXZlJyxcbiAgICAgICAgJ0JvYicsXG4gICAgICAgICdMdWN5JyxcbiAgICAgICAgJ1JpdGEnLFxuICAgICAgICAnQ2xldHVzJywgwqBcbiAgICAgICAgJ1J1ZnVzJywgwqBcbiAgICAgICAgJ0dhbGUnLCDCoFxuICAgICAgICAnU2lkbmV5JywgwqBcbiAgICAgICAgJ0VtbWllJywgwqBcbiAgICAgICAgJ0V0aHlsJywgwqBcbiAgICAgICAgJ0JhYmFyYScsIMKgXG4gICAgICAgICdKb2RpZScsIMKgXG4gICAgICAgICdLYXJvbicsIMKgXG4gICAgICAgICdSYXNoaWRhJywgwqBcbiAgICAgICAgJ09sZW4nLCDCoFxuICAgICAgICAnRmVsaXNhJywgwqBcbiAgICAgICAgJ05lbml0YScsIMKgXG4gICAgICAgICdDYW1pbGxlJywgwqBcbiAgICAgICAgJ1NoYXknLCDCoFxuICAgICAgICAnUGhvZWJlJywgwqBcbiAgICAgICAgJ0FuZ2VsaXF1ZScsIMKgXG4gICAgICAgICdNb250ZScsIMKgXG4gICAgICAgICdFeGllJywgwqBcbiAgICAgICAgJ0x1Y3JlY2lhJywgwqBcbiAgICAgICAgJ01lbG9kaScsIMKgXG4gICAgICAgICdNYXJnZScsIMKgXG4gICAgICAgICdab2UnLCDCoFxuICAgICAgICAnQ2Fzc2FuZHJhJywgwqBcbiAgICAgICAgJ1Jvc2F1cmEnLCDCoFxuICAgICAgICAnQnJlbmRvbicsIMKgXG4gICAgICAgICdNY2tpbmxleScsIMKgXG4gICAgICAgICdMdWNpZScsIMKgXG4gICAgICAgICdTaGFuZGknLCDCoFxuICAgICAgICAnTWFvJywgwqBcbiAgICAgICAgJ1ZpbG1hJywgwqBcbiAgICAgICAgJ1NoYXJhJywgwqBcbiAgICAgICAgJ0dpc2VsbGUnLCDCoFxuICAgICAgICAnUm95YWwnLCDCoFxuICAgICAgICAnRGlhJywgwqBcbiAgICAgICAgJ0l2eScsIMKgXG4gICAgICAgICdTaGVyaWRhbicsIMKgXG4gICAgICAgICdLYW5kaScsIMKgXG4gICAgICAgICdKdWxpZXR0ZScsIMKgXG4gICAgICAgICdDYW1pbGxhJywgwqBcbiAgICAgICAgJ1N1c2FubmEnLCDCoFxuICAgICAgICAnR2FyeScsIMKgXG4gICAgICAgICdHZXJ0aGEnLCDCoFxuICAgICAgICAnQnJpdGFueScsIMKgXG4gICAgICAgICdNYXJ2ZWxsYScsIMKgXG4gICAgICAgICdTaW5hJywgwqBcbiAgICAgICAgJ0xha2Vlc2hhJywgwqBcbiAgICAgICAgJ1NoZXJpbGwnLCDCoFxuICAgICAgICAnVG9uZXknLCDCoFxuICAgICAgICAnU2hlcnJpJyxcbiAgICAgICAgJ0FsYmVydGluYScsIMKgXG4gICAgICAgICdUYXJlbicsIMKgXG4gICAgICAgICdIaWxkcmVkJywgwqBcbiAgICAgICAgJ0VybWEnLCDCoFxuICAgICAgICAnTGVuYXJkJywgwqBcbiAgICAgICAgJ1R5c29uJywgwqBcbiAgICAgICAgJ01hcmt1cycsIMKgXG4gICAgICAgICdJbmV6JywgwqBcbiAgICAgICAgJ0xldHR5JywgwqBcbiAgICAgICAgJ0RlZWRyYScsIMKgXG4gICAgICAgICdUYW1tZXJhJywgwqBcbiAgICAgICAgJ1N0YW5sZXknLCDCoFxuICAgICAgICAnTG9yYScsIMKgXG4gICAgICAgICdMZW9uJywgwqBcbiAgICAgICAgJ0JlbGtpcycsIMKgXG4gICAgICAgICdKYW5hZScsIMKgXG4gICAgICAgICdMZW5uYScsIMKgXG4gICAgICAgICdCcm9ud3luJywgwqBcbiAgICAgICAgJ0tpbWJlcnknLCDCoFxuICAgICAgICAnRGViaScsIMKgXG4gICAgICAgICdCZXJuaWUnLCDCoFxuICAgICAgICAnQWxsZWVuJywgwqBcbiAgICAgICAgJ0RlbG9pc2UnLCDCoFxuICAgICAgICAnQ2hpcXVpdGEnLCDCoFxuICAgICAgICAnU2hhbmVsbGUnLCDCoFxuICAgICAgICAnV3lub25hJywgwqBcbiAgICAgICAgJ0tpc2hhJywgwqBcbiAgICAgICAgJ01pbm5hJywgwqBcbiAgICAgICAgJ0xhcm9uZGEnLCDCoFxuICAgICAgICAnQ2hheWEnLCDCoFxuICAgICAgICAnQW5hYmVsJywgwqBcbiAgICAgICAgJ0xlaWxhJywgwqBcbiAgICAgICAgJ0FybGV0aGEnLCDCoFxuICAgICAgICAnTG95Y2UnLCDCoFxuICAgICAgICAnQ3J5c3RhJywgwqBcbiAgICAgICAgJ01hZWdhbicsIMKgXG4gICAgICAgICdWYWxlcnknLCDCoFxuICAgICAgICAnSGVlJywgwqBcbiAgICAgICAgJ0VkJywgwqBcbiAgICAgICAgJ01pdHN1a28nLCDCoFxuICAgICAgICAnVmluY2Vuem8nLCDCoFxuICAgICAgICAnTWVyY2VkZXonLCDCoFxuICAgICAgICAnSmFuZWVuJywgwqBcbiAgICAgICAgJ0ZyZWRyaWNrJywgwqBcbiAgICAgICAgJ1NoYXJkYScsIMKgXG4gICAgICAgICdEeWxhbicsIMKgXG4gICAgICAgICdDYXNzaScsIMKgXG4gICAgICAgICdNYWUnLCDCoFxuICAgICAgICAnQm9iYnllJywgwqBcbiAgICAgICAgJ0xhbm55JyAgIFxuICAgICAgXSxcbiAgICAgIHBsYWNlcyA9IFtcbiAgICAgICdSb2JvdCBmYWN0b3J5JyxcbiAgICAgICdOZXcgWW9yaycsXG4gICAgICAnQnJvb2tseW4nXG4gICAgICBdLFxuICAgICAgcGxhY2VzUHJpdmF0ZSA9IFtcbiAgICAgICdVaCwgd2hlcmUgYXJlIHlvdSBmcm9tPycsXG4gICAgICAnVGhhdFxcJ3MgcHJ2aXZhdGUuJyxcbiAgICAgICdZb3VyIG1vbSEnLFxuICAgICAgJ0kgbGl2ZSByaWdodCBuZXh0IHRvIHlvdSEnLFxuICAgICAgJy4uLicsXG4gICAgICAnSVxcJ20gaG9tZWxlc3MnLFxuICAgICAgJ0lcXCdtIGhvbWVsZXNzPydcbiAgICAgIF0sXG4gICAgICByb2JvdCA9IHtcbiAgICAgICAgaWQ6IHJvYm90SURzW2dldFJhbmRvbUludCgwLCByb2JvdElEcy5sZW5ndGggLSAxKV0sXG4gICAgICAgIG5hbWU6IG5hbWVzW2dldFJhbmRvbUludCgwLCBuYW1lcy5sZW5ndGggLSAxKV0sXG4gICAgICAgIGZyb206IHBsYWNlc1ByaXZhdGVbZ2V0UmFuZG9tSW50KDAsIHBsYWNlc1ByaXZhdGUubGVuZ3RoIC0gMSldLFxuICAgICAgICBjb252ZXJzYXRpb25JRDogbnVsbCxcbiAgICAgICAgdXNlTGVzc0NsZXZlcjogTWF0aC5yYW5kb20oKSA8IDAuNSA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgcmVzcG9uc2VQZW5kaW5nOiBmYWxzZSxcbiAgICAgICAgcGVuZGluZ1Jlc3BvbnNlczogW10sXG4gICAgICAgIGFscmVhZHlBbnN3ZXJlZDogW10sXG4gICAgICAgIGFscmVhZHlBbnN3ZXJlZFJlc3BvbnNlczogW1xuICAgICAgICAgICdZb3UgYWxyZWFkeSBhc2tlZCB0aGF0IHF1ZXN0aW9uLicsXG4gICAgICAgICAgJ1lvdSBhbHJlYWR5IGFza2VkIG1lIHRoYXQuJyxcbiAgICAgICAgICAnSSB0aGluayBJIGFscmVhZHkgdG9sZCB5b3UuJyxcbiAgICAgICAgICAnSSBhbHJlYWR5IHRvbGQgeW91LicsXG4gICAgICAgICAgJ0kgYWxyZWFkeSBhbnN3ZXJlZCB0aGF0LicsXG4gICAgICAgICAgJ0RpZCB5b3UgcmVhZCBteSBhbnN3ZXI/JyxcbiAgICAgICAgICAnWW91IGFscmVhZHkgc2FpZCB0aGF0LicsXG4gICAgICAgICAgJy4uLicsXG4gICAgICAgICAgJ0kgdG9sZCB5b3UnLFxuICAgICAgICAgICdJIGxpdGVyYWxseSBqdXN0IHRvbGQgeW91LicsXG4gICAgICAgICAgJ0kganVzdCB0b2xkIHlvdS4nXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBvZmZlbnNpdmVXb3JkcyA9IFtcbiAgICAgICAgJ24oaXwxKStnezIsfSgoZXwzKStyK3xhKSsnLFxuICAgICAgICAnZithK2crJyxcbiAgICAgICAgJ2YrKGF8QCkrZ3syLH0ob3wwKSt0KydcbiAgICAgIF0sXG4gICAgICBzaGFyZVRhcmdldCxcbiAgICAgIGdsb2JhbFNvY2tldCxcbiAgICAgIGdsb2JhbFRpbWVyLFxuICAgICAgZ2xvYmFsVGltZXJXYWl0aW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICBpZiAoZ2FtZVN0YXJ0ZWQgPT09IGZhbHNlKXtcbiAgICAgICAgICBsb2FkaW5nSW5kaWNhdG9yLmlubmVySFRNTCA9ICdTdGlsbCB3YWl0aW5nLi4uJztcbiAgICAgICAgICBnbG9iYWxUaW1lcldhaXRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZiAoZ2FtZVN0YXJ0ZWQgPT09IGZhbHNlKXtcbiAgICAgICAgICAgICAgbG9hZGluZ0luZGljYXRvci5pbm5lckhUTUwgPSAnTG9va3MgbGlrZSBub2JvZHlcXCdzIGFyb3VuZC4uLic7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBnYW1lRmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICB9LCBnZXRSYW5kb21JbnQoMzAwLCAzMDAwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgNDAwMDApO1xuICAgICAgICB9XG4gICAgICB9LCAxNTAwMCk7XG5cbi8vICB2YXIgTm90aWZpY2F0aW9uID0gd2luZG93Lk5vdGlmaWNhdGlvbiB8fCB3aW5kb3cubW96Tm90aWZpY2F0aW9uIHx8IHdpbmRvdy53ZWJraXROb3RpZmljYXRpb247XG5cbiAgZnVuY3Rpb24gY2xlYXJUZXh0KHRleHQsIHJlbW92ZVB1bmN0dWF0aW9uKXtcbiAgICB0ZXh0ID0gdGV4dC50b0xvd2VyQ2FzZSgpLnRyaW0oKS5yZXBsYWNlKC8gL2csJycpO1xuICAgIGlmIChyZW1vdmVQdW5jdHVhdGlvbiA9PT0gdHJ1ZSl7XG4gICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9bLiw/IVxccyxdL2csICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuXG5mdW5jdGlvbiBjb250YWluc09mZmVuc2l2ZUxhbmd1YWdlKHRleHQpe1xuICBmb3IgKHZhciBpPTAsIGo9b2ZmZW5zaXZlV29yZHMubGVuZ3RoOyBpPGo7IGkrKyl7XG4gICAgaWYgKG5ldyBSZWdFeHAob2ZmZW5zaXZlV29yZHNbaV0sICdnaScpLnRlc3QodGV4dC5yZXBsYWNlKC9cXFcvZywgJycpKSA9PT0gdHJ1ZSl7XG4gICAgICBhZGRNZXNzYWdlKCdzeXN0ZW0nLCAnRVJST1InKTsgICAgICBcbiAgICAgIGFkZE1lc3NhZ2UoJ3N5c3RlbScsICdVbmFibGUgdG8gc2VuZCBtZXNzYWdlJyk7ICAgICAgXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4gIGZ1bmN0aW9uIHNoYXJlQ2hhdExvZygpe1xuICAgIHNoYXJlQ2hhdExvZ01vZHVsZS5zZXJ2aWNlID0gc2hhcmVUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNlcnZpY2UnKTtcbiAgICBjb25zb2xlLmxvZyhzaGFyZUNoYXRMb2dNb2R1bGUuc2VydmljZSk7XG5cbiAgICB2YXIgc2hhcmVUaXRsZSA9ICdQbGF5IERldGVjdGl2ZSwgYSBnYW1lIGJ5IEBmb3VydG9uZmlzaCc7XG4gICAgaWYgKHNoYXJlQ2hhdExvZ01vZHVsZS5zZXJ2aWNlICE9PSBudWxsICYmIHNoYXJlQ2hhdExvZ01vZHVsZS5zZXJ2aWNlID09PSAncmVkZGl0Jyl7XG4gICAgICBzaGFyZVRpdGxlID0gJ1tsb2ddIFRJVExFJztcbiAgICB9XG5cbiAgICBzaGFyZUNoYXRMb2dNb2R1bGUuc2hhcmVVcmwgPSBzaGFyZVRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdXJsJylcbiAgICAgIC5yZXBsYWNlKC9ERVNDUklQVElPTi8sICdEZXRlY3RpdmU6IEEgXCJyZXZlcnNlIFR1cmluZyB0ZXN0XCIgY2hhdCBnYW1lLicpXG4gICAgICAucmVwbGFjZSgvQ0hBVExPR1VSTC9naSwgJ2h0dHA6Ly9mb3VydG9uZmlzaC5jb20vZGV0ZWN0aXZlL2xvZz9pZD0nICsgc2hhcmVDaGF0TG9nTW9kdWxlLmNoYXRMb2dJZClcbiAgICAgIC5yZXBsYWNlKC9TSE9SVFRJVExFLywgc2hhcmVUaXRsZSk7XG5cblxuICAgIHNoYXJlQ2hhdExvZ01vZHVsZS5zdGF0dXMuaW5uZXJIVE1MID0gJyc7XG4gICAgd2luZG93Lm9wZW4oc2hhcmVDaGF0TG9nTW9kdWxlLnNoYXJlVXJsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc3RhcnRHbG9iYWxUaW1lcigpe1xuICAgIGNsZWFyVGltZW91dChnbG9iYWxUaW1lcik7XG4gICAgZ2xvYmFsVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICBwb2tlVGhlUm9ib3QoKTtcbiAgICB9LCBnZXRSYW5kb21JbnQoMzAwMDAsIDYwMDAwKSk7XG4gIH1cblxuICBmdW5jdGlvbiBsZXNzQ2xldmVyKHRleHQpe1xuICAgIGlmIChyb2JvdC51c2VMZXNzQ2xldmVyID09PSB0cnVlICYmIHRleHQgIT09ICcuLi4nKXtcbiAgICAgIHRleHQgPSB0ZXh0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXihpICl8IGkgL2lnLFwiIEkgXCIpLnRyaW0oKTtcbiAgICAgIHZhciB0ZW1wID0gdGV4dC5yZXBsYWNlKC8oWy4/IV0pXFxzKig/PVtBLVpdKS8sIFwiJDF8XCIpLnNwbGl0KFwifFwiKTtcblxuICAgICAgaWYgKHRlbXAubGVuZ3RoID09PSAxKXtcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFwuJC8sIFwiXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ2V0UmFuZG9tSW50KDEsIDEwKSA9PT0gNSl7XG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLygnKS9naSwgXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dpdGNoIChnZXRSYW5kb21JbnQoMSwgMTAwMDApKXtcbiAgICAgIGNhc2UgJzEnOlxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCdsbCcsICdsJyk7XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgJzInOlxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCdzcycsICdzJyk7XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgJzMnOlxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCdsJywgJ2snKTtcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnNCc6XG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoJ28nLCAncCcpO1xuICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc0JzpcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgndycsICdzJyk7XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgJzUnOlxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCdzJywgJ2QnKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tSb2xlKG1lc3NhZ2Upe1xuXG4gIH1cblxuXG4gIGZ1bmN0aW9uIHNob3dTaGFyaW5nQnV0dG9ucygpe1xuICAgIHNoYXJlQ2hhdExvZ1dyYXBwZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgLy9UT0RPOiBUaGlzIHNob3VsZCBiZSBhIGZ1bmN0aW9uLCBlZyByZW1vdmVDbGFzc1N0YWdnZXJlZChjbGFzcylcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NoYXJlLWxpbmstc2hpZnRlZCcpLCBmdW5jdGlvbihlbCwgaW5kZXgpIHtcbiAgICAgIHNldFRpbWVvdXQoXG4gICAgICAgIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnc2hhcmUtbGluay1zaGlmdGVkJyk7XG4gICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnc2hhcmUtbGluay11bnNoaWZ0ZWQnKTtcbiAgICAgICAgfSxcbiAgICAgICAgKCgxMCppbmRleCkpKmluZGV4KTtcbiAgICB9KTsgICAgXG4gIH1cblxuICBmdW5jdGlvbiBjb250YWN0VGhlUm9ib3QobWVzc2FnZSl7XG4gICAgaWYgKHJvYm90LmFscmVhZHlBbnN3ZXJlZC5pbmRleE9mKGNsZWFyVGV4dChtZXNzYWdlLCB0cnVlKSkgPT09IC0xKXtcbiAgICAgIGlmIChtZXNzYWdlICE9PSAnLi4uJyl7XG4gICAgICAgIHJvYm90LmFscmVhZHlBbnN3ZXJlZC5wdXNoKGNsZWFyVGV4dChtZXNzYWdlLCB0cnVlKSk7XG4gICAgICB9XG4gICAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAvLyBCYWNrZW5kIGRvZXNuJ3Qgc3VwcG9ydCBkYXRhIGluIEpTT04gZm9ybWF0LCBrZWVwaW5nIHRoaXMgaGVyZSBmb3IgZnV0dXJlLlxuICAvLyAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsICcvL3d3dy5ib3RsaWJyZS5jb20vcmVzdC9ib3RsaWJyZS9mb3JtLWNoYXQnICwgdHJ1ZSk7XG4gICAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsICcvL3d3dy5ib3RsaWJyZS5jb20vcmVzdC9ib3RsaWJyZS9mb3JtLWNoYXQ/aW5zdGFuY2U9JyArIHJvYm90LmlkICsgJyZhcHBsaWNhdGlvbj0xNTU1MjUwMzA0MTczMDA1OTUmbWVzc2FnZT0nICsgbWVzc2FnZSArIChyb2JvdC5jb252ZXJzYXRpb25JRCAhPT0gbnVsbCA/ICcmY29udmVyc2F0aW9uPScgKyByb2JvdC5jb252ZXJzYXRpb25JRCA6ICcnKSwgdHJ1ZSk7XG4gICAgICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPj0gMjAwICYmIHJlcXVlc3Quc3RhdHVzIDwgNDAwKSB7XG4gICAgLy8gICAgSlNPTiBpcyBub3QgeWV0IHN1cHBvcnRlZCwgb25seSBYTUwuXG4gICAgLy8gICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICB2YXIgcmVzcCA9IHhtbFRvSlNPTihyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgaWYgKHJvYm90LmNvbnZlcnNhdGlvbklEID09PSBudWxsKXtcbiAgICAgICAgICAgIHJvYm90LmNvbnZlcnNhdGlvbklEID0gcmVzcC5fY29udmVyc2F0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzcC5tZXNzYWdlID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgcG9rZVRoZVJvYm90KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICByb2JvdFJlc3BvbmQobGVzc0NsZXZlcihyZXNwLm1lc3NhZ2UpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy9UT0RPOiBSZWFjaGVkIHRoZSB0YXJnZXQgc2VydmVyLCBidXQgaXQgcmV0dXJuZWQgYW4gZXJyb3IuXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvL1RPRE86IFRoZXJlIHdhcyBhIGNvbm5lY3Rpb24gZXJyb3Igb2Ygc29tZSBzb3J0XG4gICAgICB9O1xuICAvLyBCYWNrZW5kIGRvZXNuJ3Qgc3VwcG9ydCBkYXRhIGluIEpTT04gZm9ybWF0LCBrZWVwaW5nIHRoaXMgaGVyZSBmb3IgZnV0dXJlLlxuICAvKlxuICAgICAgdmFyIHBhcmFtZXRlcnMgPSB7XG4gICAgICAgIGluc3RhbmNlOiByb2JvdC5pZCxcbiAgICAgICAgYXBwbGljYXRpb246ICcxNTU1MjUwMzA0MTczMDA1OTUnLFxuICAgICAgICBtZXNzYWdlOiAnaGVsbG8nICAgICAgXG4gICAgICB9O1xuXG4gICAgICBpZiAocm9ib3QuY29udmVyc2F0aW9uSUQgIT09IG51bGwpe1xuICAgICAgICBwYXJhbWV0ZXJzWydjb252ZXJzYXRpb24nXSA9IHJvYm90LmNvbnZlcnNhdGlvbklEO1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgICByZXF1ZXN0LnNlbmQoSlNPTi5zdHJpbmdpZnkocGFyYW1ldGVycykpO1xuICAqLyAgICBcbiAgICAgIHJlcXVlc3Quc2VuZCgpO1xuXG4gICAgfVxuICAgIGVsc2V7XG4gICAgICBpZiAobWVzc2FnZS5pbmRleE9mKCc/JykgPiAtMSl7XG4gICAgICAgIGlmIChyb2JvdC5hbHJlYWR5QW5zd2VyZWRSZXNwb25zZXMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgdmFyIGFubm95ZWRNZXNzYWdlID0gcm9ib3QuYWxyZWFkeUFuc3dlcmVkUmVzcG9uc2VzLnNwbGljZShnZXRSYW5kb21JbnQoMCwgcm9ib3QuYWxyZWFkeUFuc3dlcmVkUmVzcG9uc2VzLmxlbmd0aCAtIDEpLCAxKTtcbiAgICAgICAgICBhbm5veWVkTWVzc2FnZSA9IGFubm95ZWRNZXNzYWdlWzBdO1xuICAgICAgICAgIHJvYm90UmVzcG9uZChsZXNzQ2xldmVyKGFubm95ZWRNZXNzYWdlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICByb2JvdFJlc3BvbmQoJy4uLicpOyBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBva2VUaGVSb2JvdCgpe1xuICAgIHZhciBzZW5kVGV4dCA9IFtcbiAgICAgICAgICBcIi4uLlwiXG4gICAgICAgIF07XG4gICAgY29udGFjdFRoZVJvYm90KHNlbmRUZXh0W2dldFJhbmRvbUludCgwLCBzZW5kVGV4dC5sZW5ndGggLSAxKV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcm9ib3RSZXNwb25kKG1lc3NhZ2Upe1xuICAgIG1lc3NhZ2UgPSBtZXNzYWdlLnJlcGxhY2UoLyhSb2JvdE5vdEltcG9zdG9yKFxcZCkqfEplbm55fGxpbmggdHJ1b25nfEFsaWNlKS9naSwgcm9ib3QubmFtZSk7XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UucmVwbGFjZSgvUk9CT1RGUk9NL2dpLCByb2JvdC5mcm9tKTtcbiAgICByb2JvdC5wZW5kaW5nUmVzcG9uc2VzLnB1c2gobWVzc2FnZSk7XG4gICAgaWYgKHJvYm90LnBlbmRpbmdSZXNwb25zZXMubGVuZ3RoID4gMCl7XG4gICAgICB2YXIgbmV4dE1lc3NhZ2UgPSByb2JvdC5wZW5kaW5nUmVzcG9uc2VzLnNoaWZ0KCksXG4gICAgICAgICAgbmV4dE1lc3NhZ2VMZW5ndGggPSBuZXh0TWVzc2FnZS5sZW5ndGgsXG4gICAgICAgICAgbmV4dE1lc3NhZ2VEZWxheSA9IChuZXh0TWVzc2FnZUxlbmd0aCAqIGdldFJhbmRvbUludCg1MCwgMTAwKSkgKyBnZXRSYW5kb21JbnQoMjAwMCwgODAwMCk7XG4gICAgICBpZiAocm9ib3QucmVzcG9uc2VQZW5kaW5nID09PSBmYWxzZSl7XG4gICAgICAgIHJvYm90LnJlc3BvbnNlUGVuZGluZyA9IHRydWU7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICBhZGRNZXNzYWdlKCdyb2JvdCcsIG1lc3NhZ2UpO1xuICAgICAgICAgIHJvYm90LnJlc3BvbnNlUGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB9LCBuZXh0TWVzc2FnZURlbGF5KTtcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKG1lc3NhZ2Upe1xuICAgICAgICAgICAgcm9ib3RSZXNwb25kKG1lc3NhZ2UpOyAgICAgICAgICAgIFxuICAgICAgICAgIH0pKG1lc3NhZ2UpO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlYWxJbXBvc3RvcihkZXRlY3RpdmVHdWVzcyl7XG4gICAgaWYgKHBhcnRuZXJSb2xlICE9PSAndW5rbm93bicpe1xuICAgICAgZ2FtZUZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIGlmIChkZXRlY3RpdmVHdWVzcyA9PT0gcGFydG5lclJvbGUpe1xuICAgICAgICBhZGRNZXNzYWdlKCdzeXN0ZW0nLCAnQ09SUkVDVCcpO1xuICAgICAgICBnbG9iYWxTb2NrZXQuZW1pdCgnZ2FtZSBvdmVyJywgJ2RldGVjdGl2ZSB3b24nKTtcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIGFkZE1lc3NhZ2UoJ3N5c3RlbScsICdJTkNPUlJFQ1QnKTtcbiAgICAgICAgZ2xvYmFsU29ja2V0LmVtaXQoJ2dhbWUgb3ZlcicsICdkZXRlY3RpdmUgbG9zdCcpO1xuICAgICAgfVxuICAgICAgYWRkTWVzc2FnZSgnc3lzdGVtJywgJ0dhbWUgaXMgb3ZlcicpO1xuICAgICAgc2hvd1NoYXJpbmdCdXR0b25zKCk7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICBhZGRNZXNzYWdlKCdzeXN0ZW0nLCAnRVJST1InKTtcbiAgICAgIGFkZE1lc3NhZ2UoJ3N5c3RlbScsICdUb28gZWFybHkgdG8gdGVsbCcpO1xuICAgIH1cbiAgICAvL1RPRE86IEltcGxlbWVudCBzY29yaW5nIHN5c3RlbS5cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZE1lc3NhZ2UobWVzc2FnZUZyb20sIG1lc3NhZ2VUZXh0KXtcbiAgICBpZiAobWVzc2FnZVRleHQudHJpbSgpLmxlbmd0aCA9PT0gMCl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBuZXdNZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkxJXCIpO1xuICAgIHN3aXRjaCAobWVzc2FnZUZyb20pe1xuICAgICAgY2FzZSAndXNlcic6XG4gICAgICAgIG5ld01lc3NhZ2UuY2xhc3NMaXN0LmFkZCgndXNlci1tZXNzYWdlJyk7XG4gICAgICAgIG5ld01lc3NhZ2UuY2xhc3NMaXN0LmFkZCgnbmV3LW1lc3NhZ2UnKTtcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3lzdGVtJzpcbiAgICAgICAgbmV3TWVzc2FnZS5jbGFzc0xpc3QuYWRkKCdzeXN0ZW0tbWVzc2FnZScpO1xuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2VUZXh0KXtcbiAgICAgICAgICBjYXNlICdFUlJPUic6XG4gICAgICAgICAgY2FzZSAnSU5DT1JSRUNUJzpcbiAgICAgICAgICAgIG5ld01lc3NhZ2UuY2xhc3NMaXN0LmFkZCgnZXJyb3ItbWVzc2FnZScpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0NPUlJFQ1QnOlxuICAgICAgICAgICAgbmV3TWVzc2FnZS5jbGFzc0xpc3QuYWRkKCd1c2VyLWNvcnJlY3QnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbmV3TWVzc2FnZS5jbGFzc0xpc3QuYWRkKCduZXctbWVzc2FnZScpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JvYm90JzpcbiAgICAgIGNhc2UgJ2ltcG9zdG9yJzpcbiAgICAgICAgbmV3TWVzc2FnZS5jbGFzc0xpc3QuYWRkKCdyb3JpLW1lc3NhZ2UnKTtcbiAgICAgICAgbmV3TWVzc2FnZS5jbGFzc0xpc3QuYWRkKCduZXctbWVzc2FnZScpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLypcbiAgICAgIEZ1biBzdHVmZiAtLSBwYXJ0IG9uZSEgI2Vhc3RlcmVnZ3NcbiAgICAqL1xuICAgIHZhciBmdW5TdHVmZiA9IGNsZWFyVGV4dChtZXNzYWdlVGV4dCwgdHJ1ZSk7XG5cbiAgICBpZiAoZnVuU3R1ZmYuaW5kZXhPZignd2lnZ2xlJykgPiAtMSl7XG4gICAgICBuZXdNZXNzYWdlLmNsYXNzTGlzdC5hZGQoJ3dpZ2dsZS1tZXNzYWdlJyk7ICAgICAgICBcbiAgICB9XG5cbiAgICBpZiAoZnVuU3R1ZmYuaW5kZXhPZignanVtcCcpID4gLTEpe1xuICAgICAgbmV3TWVzc2FnZS5jbGFzc0xpc3QuYWRkKCdqdW1wLW1lc3NhZ2UnKTsgICAgICAgIFxuICAgIH1cblxuICAgIG5ld01lc3NhZ2UuaW5uZXJIVE1MID0gbWVzc2FnZVRleHQucmVwbGFjZSgvKDwoW14+XSspPikvaWcsXCJcIik7XG4gICAgLy9UT0RPOiBSZXdyaXRlIHRoaXMhXG5cbiAgICBpZiAobWVzc2FnZUZyb20gIT09ICd1c2VyJyAmJiBtZXNzYWdlRnJvbSAhPT0gJ3N5c3RlbScpe1xuICAgICAgbmV3TWVzc2FnZS5pbm5lckhUTUwgPSAnPHNwYW4gY2xhc3M9XCJtZXNzYWdlLXByZXBlbmRcIj4+PC9zcGFuPiAnICsgbmV3TWVzc2FnZS5pbm5lckhUTUw7XG4gICAgfVxuXG5cbiAgICBpZiAobWVzc2FnZUZyb20gPT09ICdyb2JvdCcgJiYgZ2FtZUZpbmlzaGVkID09PSB0cnVlKXtcbiAgICAgIC8vIG51bGxcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIG1lc3NhZ2VzLmFwcGVuZENoaWxkKG5ld01lc3NhZ2UpO1xuXG4gICAgICAvKlxuICAgICAgICBGdW4gc3R1ZmYgLS0gcGFydCB0d28hICNlYXN0ZXJlZ2dzXG4gICAgICAqL1xuICAgICAgc3dpdGNoKGNsZWFyVGV4dChtZXNzYWdlVGV4dCwgdHJ1ZSkpe1xuICAgICAgICBjYXNlICdpbGlrZXRoaXNnYW1lJzpcbiAgICAgICAgICBhZGRNZXNzYWdlKCdzeXN0ZW0nLCAnT2ggaGV5LCB0aGFua3MhJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdnb2Rtb2RlJzpcbiAgICAgICAgICBhZGRNZXNzYWdlKCdzeXN0ZW0nLCAnTm90IGluIHRoaXMgZ2FtZS4nKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICB9XG4gICAgaWYgKG1lc3NhZ2VGcm9tID09PSAndXNlcicpe1xuICAgICAgbWVzc2FnZVRleHRJbnB1dC52YWx1ZSA9ICcnO1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgaWYgKCFkb2N1bWVudC5oYXNGb2N1cygpKXtcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSAnTmV3IG1lc3NhZ2UgfCBEZXRlY3RpdmUgYnkgQGZvdXJ0b25maXNoJztcbiAgICAgIH1cbiAgICB9XG4gICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodDtcblxuICAgIG1lc3NhZ2VUZXh0ID0gY2xlYXJUZXh0KG1lc3NhZ2VUZXh0LCBmYWxzZSk7XG5cbiAgICBpZiAobWVzc2FnZUZyb20gPT09ICd1c2VyJyAmJiAveW91LipyZT8uKihpbXBvc3RvcnxpbXBvc3Rlcnxyb2JvdHxib3QpL2dpLnRlc3QobWVzc2FnZVRleHQpICYmIHVzZXJSb2xlID09PSAnZGV0ZWN0aXZlJyAmJiBnYW1lRmluaXNoZWQgPT09IGZhbHNlICYmIG1lc3NhZ2VUZXh0LmluZGV4T2YoJ25vdCcpID09PSAtMSl7XG4gICAgICBpZiAobWVzc2FnZVRleHQuaW5kZXhPZignPycpID09PSAtMSAmJiBtZXNzYWdlVGV4dC5pbmRleE9mKCdib3QnKSA+IC0xICYmIG1lc3NhZ2VUZXh0LmluZGV4T2YoJ2ltcG9zdG9yJykgPT09IC0xICYmIG1lc3NhZ2VUZXh0LmluZGV4T2YoJz8nKSA9PT0gLTEpe1xuICAgICAgICByZXZlYWxJbXBvc3Rvcigncm9ib3QnKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG1lc3NhZ2VUZXh0LmluZGV4T2YoJz8nKSA9PT0gLTEgJiYgKG1lc3NhZ2VUZXh0LmluZGV4T2YoJ2ltcG9zdG9yJykgPiAtMSAgfHwgbWVzc2FnZVRleHQuaW5kZXhPZignaW1wb3N0ZXInKSA+IC0xICkgJiYgbWVzc2FnZVRleHQuaW5kZXhPZignYm90JykgPT09IC0xKXtcbiAgICAgICAgcmV2ZWFsSW1wb3N0b3IoJ2ltcG9zdG9yJyk7XG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICBhZGRNZXNzYWdlKCdzeXN0ZW0nLCAnUGxlYXNlIHNheSBcIllvdSBhcmUgYSByb2JvdFwiIG9yIFwiWW91IGFyZSBhbiBpbXBvc3RvclwiLicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAodXNlclJvbGUgIT09IHVuZGVmaW5lZCl7XG4gICAgICBkb2N1bWVudC50aXRsZSA9ICdZb3UgYXJlIHRoZSAnICsgdXNlclJvbGUgKyAnIHwgRGV0ZWN0aXZlIGJ5IEBmb3VydG9uZmlzaCc7XG4gICAgfVxuICB9LCBmYWxzZSk7XG5cbiAgdmFyIHNvY2tldDtcblxuICBpZiAocHJvZHVjdGlvblNlcnZlcigpKXtcbiAgICBzb2NrZXQgPSBpbyhkb2N1bWVudC5sb2NhdGlvbi5wcm90b2NvbCArICcvL2ZvdXJ0b25maXNoLmNvbTozMDAzJyk7XG4gIH1cbiAgZWxzZXtcbiAgICBzb2NrZXQgPSBpbyhkb2N1bWVudC5sb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBkb2N1bWVudC5sb2NhdGlvbi5ob3N0KTtcbiAgfVxuXG4gIGlmIChkaXNtaXNzSW5zdHJ1Y3Rpb25zQnV0dG9uKXtcbiAgICBkaXNtaXNzSW5zdHJ1Y3Rpb25zQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgIGlmIChwYXJ0bmVyUm9sZSA9PT0gJ3JvYm90Jyl7XG4gICAgICAgIHJlc3RhcnRHbG9iYWxUaW1lcigpO1xuICAgICAgfVxuICAgICAgaW5zdHJ1Y3Rpb25zV3JhcHBlci5jbGFzc0xpc3QuYWRkKCdzaGlmdGVkVXAnKTtcbiAgICAgIG1lc3NhZ2VGb3JtLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgbW9yZUluZm8uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICBtb3JlSW5mby5jbGFzc0xpc3QucmVtb3ZlKCdzaGlmdGVkJyk7XG4gICAgICBtZXNzYWdlVGV4dElucHV0LmZvY3VzKCk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBpZiAocmVxdWVzdE5vdGlmaWNhdGlvblBlcm1pc3Npb24pe1xuICAvLyAgIHJlcXVlc3ROb3RpZmljYXRpb25QZXJtaXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgLy8gICAgIE5vdGlmaWNhdGlvbi5yZXF1ZXN0UGVybWlzc2lvbihmdW5jdGlvbiAocGVybWlzc2lvbikge1xuICAvLyAgICAgY29uc29sZS5sb2cocGVybWlzc2lvbik7XG4gIC8vICAgICB9KTtcbiAgLy8gICB9KTtcbiAgLy8gfVxuXG4gIGlmIChzaGFyZUNoYXRMb2dNb2R1bGUudHJpZ2dlckVsKXtcbiAgICBzaGFyZUNoYXRMb2dNb2R1bGUudHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXYpe1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHNoYXJlVGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZXYpO1xuXG4gICAgICBzd2l0Y2ggKHNoYXJlVGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS11cmwnKSl7XG4gICAgICAgIGNhc2UgJ1JFTE9BRCc6XG4gICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmIChzaGFyZUNoYXRMb2dNb2R1bGUuc2hhcmVVcmwgPT09IG51bGwpe1xuICAgICAgICAgICAgc2hhcmVDaGF0TG9nTW9kdWxlLnN0YXR1cy5pbm5lckhUTUwgPSAnTG9hZGluZy4uLic7XG4gICAgICAgICAgICBnbG9iYWxTb2NrZXQuZW1pdCgnc2F2ZV9jaGF0X2xvZycsIG1lc3NhZ2VzV3JhcHBlci5pbm5lckhUTUwsIHVzZXJSb2xlKTsgICAgIFxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgc2hhcmVDaGF0TG9nKCk7XG4gICAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChzaGlmdGVkRWxzMS5sZW5ndGggPiAwKXtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHNoaWZ0ZWRFbHMxLCBmdW5jdGlvbihlbCwgaW5kZXgpIHtcbiAgICAgIHNldFRpbWVvdXQoXG4gICAgICAgIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnc2hpZnRlZC0xJyk7XG4gICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgndW5zaGlmdGVkLTEnKTtcbiAgICAgICAgfSxcbiAgICAgICAgKDIwMC0oMTAqaW5kZXgpKSppbmRleCk7XG4gICAgfSk7XG4gIH0gIFxuXG4gIHNvY2tldC5vbignY29ubmVjdGVkJywgZnVuY3Rpb24oZGF0YSkge1xuICAgIGdsb2JhbFNvY2tldCA9IHNvY2tldDtcbiAgfSk7XG5cbiAgc29ja2V0Lm9uKCdjaGF0X2xvZ19zYXZlZCcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBjb25zb2xlLmxvZygnY2hhdCBsb2cgc2F2ZWQnKTtcbiAgICBzaGFyZUNoYXRMb2dNb2R1bGUuY2hhdExvZ0lkID0gZGF0YTtcbiAgICBzaGFyZUNoYXRMb2coKTtcbiAgfSk7XG5cbiAgc29ja2V0Lm9uKCdlcnJvcicsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBjb25zb2xlLmxvZygnRVJST1InKTtcbiAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgfSk7XG5cbiAgc29ja2V0Lm9uKCdnYW1lIG92ZXInLCBmdW5jdGlvbihzdGF0dXMpIHtcbiAgICBpZiAoc3RhdHVzID09PSAnZGV0ZWN0aXZlIHdvbicpe1xuICAgICAgYWRkTWVzc2FnZSgnc3lzdGVtJywgJ1lPVSBIQVZFIEJFRU4gUkVWRUFMRUQnKTtcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIGFkZE1lc3NhZ2UoJ3N5c3RlbScsICdZT1UgRk9PTEVEIFRIRSBERVRFQ1RJVkUnKTsgICAgICBcbiAgICB9XG4gICAgYWRkTWVzc2FnZSgnc3lzdGVtJywgJ0dhbWUgaXMgb3ZlcicpO1xuICAgIHNob3dTaGFyaW5nQnV0dG9ucygpO1xuICB9KTtcblxuICBzb2NrZXQub24oJ3BhcnRuZXIgZGlzY29ubmVjdGVkJywgZnVuY3Rpb24oZGF0YSkge1xuICAgIGFkZE1lc3NhZ2UoJ3N5c3RlbScsICdQYXJ0bmVyIGRpc2Nvbm5lY3RlZC4nKTtcbiAgICBzaG93U2hhcmluZ0J1dHRvbnMoKTtcbiAgICBjb25zb2xlLmxvZygnUGFydG5lciBkaXNjb25uZWN0ZWQ6ICcgKyBkYXRhICsgJy4nKTtcblxuICAgIGlmIChkYXRhID09PSAncGluZyB0aW1lb3V0Jyl7XG4gICAgICAvL1RPRE86IFdhcyB0aGlzIGEgYm90P1xuICAgIH1cbiAgICBpZiAocGFydG5lclJvbGUgIT09ICd1bmtub3duJyAmJiB1c2VyUm9sZSA9PT0gJ2RldGVjdGl2ZScgJiYgZ2FtZUZpbmlzaGVkID09PSBmYWxzZSl7XG4gICAgICBhZGRNZXNzYWdlKCdzeXN0ZW0nLCAnWW91IHdlcmUgc3BlYWtpbmcgd2l0aCB0aGUgJyArIHBhcnRuZXJSb2xlLnRvVXBwZXJDYXNlKCkgKyAnLicpO1xuICAgIH1cbiAgfSk7XG5cbiAgc29ja2V0Lm9uKCd5b3UgYXJlJywgZnVuY3Rpb24oZGF0YSkge1xuICAgIGdhbWVTdGFydGVkID0gdHJ1ZTtcbiAgICBjbGVhclRpbWVvdXQoZ2xvYmFsVGltZXJXYWl0aW5nKTtcbiAgICB1c2VyUm9sZSA9IGRhdGE7XG4gICAgbG9hZGluZ0luZGljYXRvci5jbGFzc0xpc3QuYWRkKCdzaGlmdGVkVXAnKTtcbiAgICB2YXIgdW5zaGlmdGVkRWxzMSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Vuc2hpZnRlZC0xJylcblxuICAgIGlmICh1bnNoaWZ0ZWRFbHMxLmxlbmd0aCA+IDApe1xuICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCh1bnNoaWZ0ZWRFbHMxLCBmdW5jdGlvbihlbCwgaW5kZXgpIHtcbiAgICAgICAgc2V0VGltZW91dChcbiAgICAgICAgICBmdW5jdGlvbigpe1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgndW5zaGlmdGVkLTEnKTtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3NoaWZ0ZWRVcDEnKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgICgyMDAtKDEwKmluZGV4KSkqaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfVxuXG5cblxuICAgIGlmIChzaGlmdGVkRWxzLmxlbmd0aCA+IDApe1xuICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChzaGlmdGVkRWxzLCBmdW5jdGlvbihlbCwgaW5kZXgpIHtcbiAgICAgICAgc2V0VGltZW91dChcbiAgICAgICAgICBmdW5jdGlvbigpe1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnc2hpZnRlZCcpO1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgndW5zaGlmdGVkJyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAoMjAwLSgxMCppbmRleCkpKmluZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cbi8vICAgIHdoYXRJc1RoaXNMaW5rLmNsYXNzTGlzdC5hZGQoJ3NoaWZ0ZWRVcCcpO1xuICAgIGRpc21pc3NJbnN0cnVjdGlvbnNCdXR0b24uZm9jdXMoKTtcbiAgICBkb2N1bWVudC50aXRsZSA9ICdZb3UgYXJlIHRoZSAnICsgdXNlclJvbGUgKyAnIHwgRGV0ZWN0aXZlIGJ5IEBmb3VydG9uZmlzaCc7XG4gICAgcm9sZVJlbWluZGVyLmlubmVySFRNTCA9ICd0aGUgPHNwYW4gY2xhc3M9XCJoaWdobGlnaHRcIj4nICsgdXNlclJvbGUgKyAnPC9zcGFuPic7XG4gICAgeW91QXJlLmlubmVySFRNTCA9ICdZb3UgYXJlIHRoZSA8c3BhbiBjbGFzcz1cImhpZ2hsaWdodFwiPicgKyB1c2VyUm9sZSArICc8L3NwYW4+JztcbiAgICBpZiAodXNlclJvbGUgPT09ICdkZXRlY3RpdmUnKXtcbiAgICAgIGluc3RydWN0aW9ucy5pbm5lckhUTUwgPSAnPHA+WW91IG11c3QgZmlndXJlIG91dCB3aGV0aGVyIHlvdSBhcmUgc3BlYWtpbmcgdG8gYSA8c3BhbiBjbGFzcz1cImhpZ2hsaWdodFwiPlJPQk9UPC9zcGFuPiogb3IgYW4gPHNwYW4gY2xhc3M9XCJoaWdobGlnaHRcIj5JTVBPU1RPUjwvc3Bhbj4sIGFub3RoZXIgcGxheWVyIHByZXRlbmRpbmcgdG8gYmUgYSA8c3BhbiBjbGFzcz1cImhpZ2hsaWdodFwiPlJPQk9UPC9zcGFuPiouPC9wPicgK1xuICAgICAgICAnPHA+U2F5IDxlbT5cIllvdSBhcmUgYW4gaW1wb3N0b3JcIjwvZW0+IG9yIDxlbT5cIllvdSBhcmUgYSByb2JvdFwiPC9lbT4gb25jZSB5b3UgYXJlIGNvbmZpZGVudCB3aXRoIHlvdXIgY2hvaWNlLjwvcD4nICtcbiAgICAgICAgJzxwIGNsYXNzPVwiZGVmaW5pdGlvblwiPipBIDxhIGhyZWY9XCJodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NoYXRib3RcIiB0YXJnZXQ9XCJfYmxhbmtcIj5jaGF0dGVyIHJvYm90PC9hPiBpcyBhIHR5cGUgb2YgY29udmVyc2F0aW9uYWwgYWdlbnQsIGEgY29tcHV0ZXIgcHJvZ3JhbSBkZXNpZ25lZCB0byBzaW11bGF0ZSBhbiBpbnRlbGxpZ2VudCBjb252ZXJzYXRpb24gd2l0aCBvbmUgb3IgbW9yZSBodW1hbiB1c2VycyB2aWEgYXVkaXRvcnkgb3IgdGV4dHVhbCBtZXRob2RzLjwvcD4nO1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgaW5zdHJ1Y3Rpb25zLmlubmVySFRNTCA9ICc8cD5Zb3UgbXVzdCBjb252aW5jZSB0aGUgPHNwYW4gY2xhc3M9XCJoaWdobGlnaHRcIj5ERVRFQ1RJVkU8L3NwYW4+IHRoYXQgaGUgb3Igc2hlIGlzIHNwZWFraW5nIHRvIGEgPHNwYW4gY2xhc3M9XCJoaWdobGlnaHRcIj5ST0JPVDwvc3Bhbj4qLjwvcD4nICsgXG4gICAgICAnPHAgY2xhc3M9XCJkZWZpbml0aW9uXCI+KkEgPGEgaHJlZj1cImh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2hhdGJvdFwiIHRhcmdldD1cIl9ibGFua1wiPmNoYXR0ZXIgcm9ib3Q8L2E+IGlzIGEgdHlwZSBvZiBjb252ZXJzYXRpb25hbCBhZ2VudCwgYSBjb21wdXRlciBwcm9ncmFtIGRlc2lnbmVkIHRvIHNpbXVsYXRlIGFuIGludGVsbGlnZW50IGNvbnZlcnNhdGlvbiB3aXRoIG9uZSBvciBtb3JlIGh1bWFuIHVzZXJzIHZpYSBhdWRpdG9yeSBvciB0ZXh0dWFsIG1ldGhvZHMuPC9wPic7ICAgICAgXG4gICAgfVxuICB9KTtcblxuICBzb2NrZXQub24oJ3BhaXJlZCcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBpZiAoZGF0YS51c2Vyc1swXSA9PT0gJ3JvYm90JyB8fCBkYXRhLnVzZXJzWzFdID09PSAncm9ib3QnKXtcbiAgICAgIHBhcnRuZXJSb2xlID0gJ3JvYm90JztcbiAgICAgIHNlbmRNZXNzYWdlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoY29udGFpbnNPZmZlbnNpdmVMYW5ndWFnZShjbGVhclRleHQobWVzc2FnZVRleHRJbnB1dC52YWx1ZSwgdHJ1ZSkpID09PSBmYWxzZSl7XG4gICAgICAgICAgcmVzdGFydEdsb2JhbFRpbWVyKCk7XG4gICAgICAgICAgaWYgKGdhbWVGaW5pc2hlZCA9PT0gZmFsc2Upe1xuICAgICAgICAgICAgY29udGFjdFRoZVJvYm90KG1lc3NhZ2VUZXh0SW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgYWRkTWVzc2FnZSgndXNlcicsIG1lc3NhZ2VUZXh0SW5wdXQudmFsdWUpOyAgICAgICAgICBcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGFsZXJ0KCdMZXRcXCdzIGdpdmUgdGhlIHJvYm90IHNvbWUgcmVzdC4nKTtcbiAgICAgICAgICB9ICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIHBhcnRuZXJSb2xlID0gKHVzZXJSb2xlID09PSAnZGV0ZWN0aXZlJyA/ICdpbXBvc3RvcicgOiAnZGV0ZWN0aXZlJyk7XG5cbiAgICAgIHNlbmRNZXNzYWdlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoY29udGFpbnNPZmZlbnNpdmVMYW5ndWFnZShjbGVhclRleHQobWVzc2FnZVRleHRJbnB1dC52YWx1ZSwgdHJ1ZSkpID09PSBmYWxzZSl7XG4gICAgICAgICAgc29ja2V0LmVtaXQoJ3NlbmQgbWVzc2FnZScsIHtcbiAgICAgICAgICAgICAgZnJvbTogdXNlclJvbGUsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VUZXh0SW5wdXQudmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIGFkZE1lc3NhZ2UoJ3VzZXInLCBtZXNzYWdlVGV4dElucHV0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gIH0pO1xuXG4gIHNvY2tldC5vbignbWVzc2FnZSByZWNlaXZlZCcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBpZiAocGFydG5lclJvbGUgPT09ICd1bmtub3duJyl7XG4gICAgICBwYXJ0bmVyUm9sZSA9IGRhdGEuZnJvbTtcbiAgICB9XG4gICAgaWYgKGRhdGEuZnJvbSAhPT0gdXNlclJvbGUpe1xuICAgICAgYWRkTWVzc2FnZShwYXJ0bmVyUm9sZSwgZGF0YS5tZXNzYWdlKTtcbiAgICB9XG4gIH0pO1xuXG4gIHNvY2tldC5vbignc2VjdXJpdHkgaW5mbycsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBpZiAod2luZG93LmxvY2F0aW9uLnNlYXJjaCA9PT0gJz9zZWN1cml0eV9pbmZvPXRydWUnKXtcbiAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==